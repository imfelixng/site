/*!*********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[14].oneOf[12].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[14].oneOf[12].use[3]!./src/styles/tailwind.css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************/
/*! tailwindcss v4.1.8 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-teal-50: oklch(98.4% 0.014 180.72);
    --color-teal-300: oklch(85.5% 0.138 181.071);
    --color-teal-400: oklch(77.7% 0.152 181.912);
    --color-teal-500: oklch(70.4% 0.14 182.503);
    --color-teal-600: oklch(60% 0.118 184.704);
    --color-sky-200: oklch(90.1% 0.058 230.902);
    --color-pink-400: oklch(71.8% 0.202 349.761);
    --color-zinc-50: oklch(98.5% 0 0);
    --color-zinc-100: oklch(96.7% 0.001 286.375);
    --color-zinc-200: oklch(92% 0.004 286.32);
    --color-zinc-300: oklch(87.1% 0.006 286.286);
    --color-zinc-400: oklch(70.5% 0.015 286.067);
    --color-zinc-500: oklch(55.2% 0.016 285.938);
    --color-zinc-600: oklch(44.2% 0.017 285.786);
    --color-zinc-700: oklch(37% 0.013 285.805);
    --color-zinc-800: oklch(27.4% 0.006 286.033);
    --color-zinc-900: oklch(21% 0.006 285.885);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --container-xs: 20rem;
    --container-xl: 36rem;
    --container-2xl: 42rem;
    --container-3xl: 48rem;
    --container-5xl: 64rem;
    --container-7xl: 80rem;
    --text-xs: 0.8125rem;
    --text-xs--line-height: 1.5rem;
    --text-sm: 0.875rem;
    --text-sm--line-height: 1.5rem;
    --text-base: 1rem;
    --text-base--line-height: 1.75rem;
    --text-4xl: 2rem;
    --text-4xl--line-height: 2.5rem;
    --text-5xl: 3rem;
    --text-5xl--line-height: 3.5rem;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --tracking-tight: -0.025em;
    --radius-md: 0.375rem;
    --radius-xl: 0.75rem;
    --radius-2xl: 1rem;
    --radius-3xl: 1.5rem;
    --ease-in: cubic-bezier(0.4, 0, 1, 1);
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --blur-xs: 4px;
    --blur-sm: 8px;
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .pointer-events-auto {
    pointer-events: auto;
  }
  .pointer-events-none {
    pointer-events: none;
  }
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .sticky {
    position: sticky;
  }
  .inset-0 {
    inset: calc(var(--spacing) * 0);
  }
  .-inset-x-4 {
    inset-inline: calc(var(--spacing) * -4);
  }
  .inset-x-1 {
    inset-inline: calc(var(--spacing) * 1);
  }
  .inset-x-4 {
    inset-inline: calc(var(--spacing) * 4);
  }
  .-inset-y-6 {
    inset-block: calc(var(--spacing) * -6);
  }
  .inset-y-0 {
    inset-block: calc(var(--spacing) * 0);
  }
  .top-\(--avatar-top\,--spacing\(3\)\) {
    top: var(--avatar-top,calc(var(--spacing) * 3));
  }
  .top-\(--header-top\,--spacing\(6\)\) {
    top: var(--header-top,calc(var(--spacing) * 6));
  }
  .top-0 {
    top: calc(var(--spacing) * 0);
  }
  .top-3 {
    top: calc(var(--spacing) * 3);
  }
  .top-8 {
    top: calc(var(--spacing) * 8);
  }
  .-bottom-px {
    bottom: -1px;
  }
  .left-0 {
    left: calc(var(--spacing) * 0);
  }
  .z-0 {
    z-index: 0;
  }
  .z-10 {
    z-index: 10;
  }
  .z-20 {
    z-index: 20;
  }
  .z-50 {
    z-index: 50;
  }
  .order-first {
    order: -9999;
  }
  .order-last {
    order: 9999;
  }
  .prose {
    --tw-prose-body: oklch(44.2% 0.017 285.786);
    --tw-prose-headings: oklch(21% 0.006 285.885);
    --tw-prose-links: oklch(70.4% 0.14 182.503);
    --tw-prose-links-hover: oklch(60% 0.118 184.704);
    --tw-prose-underline: color-mix(in oklab, oklch(70.4% 0.14 182.503) 20%, transparent);
    --tw-prose-underline-hover: oklch(70.4% 0.14 182.503);
    --tw-prose-bold: oklch(21% 0.006 285.885);
    --tw-prose-counters: oklch(21% 0.006 285.885);
    --tw-prose-bullets: oklch(21% 0.006 285.885);
    --tw-prose-hr: oklch(96.7% 0.001 286.375);
    --tw-prose-quote-borders: oklch(92% 0.004 286.32);
    --tw-prose-captions: oklch(70.5% 0.015 286.067);
    --tw-prose-code: oklch(37% 0.013 285.805);
    --tw-prose-code-bg: color-mix(in oklab, oklch(87.1% 0.006 286.286) 20%, transparent);
    --tw-prose-pre-code: oklch(96.7% 0.001 286.375);
    --tw-prose-pre-bg: oklch(21% 0.006 285.885);
    --tw-prose-pre-border: transparent;
    --tw-prose-th-borders: oklch(92% 0.004 286.32);
    --tw-prose-td-borders: oklch(96.7% 0.001 286.375);
    --tw-prose-invert-body: oklch(70.5% 0.015 286.067);
    --tw-prose-invert-headings: oklch(92% 0.004 286.32);
    --tw-prose-invert-links: oklch(77.7% 0.152 181.912);
    --tw-prose-invert-links-hover: oklch(77.7% 0.152 181.912);
    --tw-prose-invert-underline: color-mix(in oklab, oklch(77.7% 0.152 181.912) 30%, transparent);
    --tw-prose-invert-underline-hover: oklch(77.7% 0.152 181.912);
    --tw-prose-invert-bold: oklch(92% 0.004 286.32);
    --tw-prose-invert-counters: oklch(92% 0.004 286.32);
    --tw-prose-invert-bullets: oklch(92% 0.004 286.32);
    --tw-prose-invert-hr: color-mix(in oklab, oklch(37% 0.013 285.805) 40%, transparent);
    --tw-prose-invert-quote-borders: oklch(55.2% 0.016 285.938);
    --tw-prose-invert-captions: oklch(55.2% 0.016 285.938);
    --tw-prose-invert-code: oklch(87.1% 0.006 286.286);
    --tw-prose-invert-code-bg: color-mix(in oklab, oklch(92% 0.004 286.32) 5%, transparent);
    --tw-prose-invert-pre-code: oklch(96.7% 0.001 286.375);
    --tw-prose-invert-pre-bg: rgb(0 0 0 / 0.4);
    --tw-prose-invert-pre-border: color-mix(in oklab, oklch(92% 0.004 286.32) 10%, transparent);
    --tw-prose-invert-th-borders: oklch(37% 0.013 285.805);
    --tw-prose-invert-td-borders: oklch(27.4% 0.006 286.033);
    color: var(--tw-prose-body);
    line-height: 1.75rem;
    :where(.prose > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      margin-top: 2.5rem;
      margin-bottom: 2.5rem;
    }
    :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      margin-top: 1.75rem;
      margin-bottom: 1.75rem;
    }
    :where(h2, h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      color: var(--tw-prose-headings);
      font-weight: 600;
    }
    :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      font-size: 1.25rem;
      line-height: 1.75rem;
      margin-top: 5rem;
      margin-bottom: 1rem;
    }
    :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      font-size: 1rem;
      line-height: 1.75rem;
      margin-top: 4rem;
      margin-bottom: 1rem;
    }
    :where(:is(h2, h3) + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      margin-top: 0;
    }
    :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      border-radius: 1.5rem;
    }
    :where(a):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      color: var(--tw-prose-links);
      font-weight: 600;
      text-decoration: underline;
      text-decoration-color: var(--tw-prose-underline);
      transition-property: color, text-decoration-color;
      transition-duration: 150ms;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }
    :where(a:hover):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      color: var(--tw-prose-links-hover);
      text-decoration-color: var(--tw-prose-underline-hover);
    }
    :where(strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      color: var(--tw-prose-bold);
      font-weight: 600;
    }
    :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      display: inline-block;
      color: var(--tw-prose-code);
      font-size: 0.875rem;
      font-weight: 600;
      background-color: var(--tw-prose-code-bg);
      border-radius: 0.5rem;
      padding-left: 0.25rem;
      padding-right: 0.25rem;
    }
    :where(a code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      color: inherit;
    }
    :where(:is(h2, h3) code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      font-weight: 700;
    }
    :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      padding-left: 1.5rem;
      border-left-width: 2px;
      border-left-color: var(--tw-prose-quote-borders);
      font-style: italic;
    }
    :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      color: var(--tw-prose-captions);
      font-size: 0.875rem;
      line-height: 1.5rem;
      margin-top: 0.75rem;
    }
    :where(figcaption > p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      margin: 0;
    }
    :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      list-style-type: disc;
    }
    :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      list-style-type: decimal;
    }
    :where(ul, ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      padding-left: 1.5rem;
    }
    :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      margin-top: 1.5rem;
      margin-bottom: 1.5rem;
      padding-left: 0.875rem;
    }
    :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
      font-size: 0.875rem;
      font-weight: 600;
    }
    :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
      color: var(--tw-prose-counters);
    }
    :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
      color: var(--tw-prose-bullets);
    }
    :where(li :is(ol, ul)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      margin-top: 1rem;
      margin-bottom: 1rem;
    }
    :where(li :is(li, p)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      margin-top: 0.75rem;
      margin-bottom: 0.75rem;
    }
    :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      color: var(--tw-prose-pre-code);
      font-size: 0.875rem;
      font-weight: 500;
      background-color: var(--tw-prose-pre-bg);
      border-radius: 1.5rem;
      padding: 2rem;
      overflow-x: auto;
      border: 1px solid;
      border-color: var(--tw-prose-pre-border);
    }
    :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      display: inline;
      color: inherit;
      font-size: inherit;
      font-weight: inherit;
      background-color: transparent;
      border-radius: 0;
      padding: 0;
    }
    :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      margin-top: 5rem;
      margin-bottom: 5rem;
      border-top-width: 1px;
      border-color: var(--tw-prose-hr);
      @screen lg {
        margin-left: calc(3rem * -1);
        margin-right: calc(3rem * -1);
      }
    }
    :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      width: 100%;
      table-layout: auto;
      text-align: left;
      font-size: 0.875rem;
    }
    :where(thead):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      border-bottom-width: 1px;
      border-bottom-color: var(--tw-prose-th-borders);
    }
    :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      color: var(--tw-prose-headings);
      font-weight: 600;
      vertical-align: bottom;
      padding-bottom: 0.5rem;
    }
    :where(thead th:not(:first-child)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      padding-left: 0.5rem;
    }
    :where(thead th:not(:last-child)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      padding-right: 0.5rem;
    }
    :where(tbody tr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      border-bottom-width: 1px;
      border-bottom-color: var(--tw-prose-td-borders);
    }
    :where(tbody tr:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      border-bottom-width: 0;
    }
    :where(tbody td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      vertical-align: baseline;
    }
    :where(tfoot):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      border-top-width: 1px;
      border-top-color: var(--tw-prose-th-borders);
    }
    :where(tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      vertical-align: top;
    }
    :where(:is(tbody, tfoot) td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      padding-top: 0.5rem;
      padding-bottom: 0.5rem;
    }
    :where(:is(tbody, tfoot) td:not(:first-child)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      padding-left: 0.5rem;
    }
    :where(:is(tbody, tfoot) td:not(:last-child)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
      padding-right: 0.5rem;
    }
  }
  .-m-1 {
    margin: calc(var(--spacing) * -1);
  }
  .mx-auto {
    margin-inline: auto;
  }
  .-my-2 {
    margin-block: calc(var(--spacing) * -2);
  }
  .-my-4 {
    margin-block: calc(var(--spacing) * -4);
  }
  .mt-1 {
    margin-top: calc(var(--spacing) * 1);
  }
  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }
  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }
  .mt-9 {
    margin-top: calc(var(--spacing) * 9);
  }
  .mt-16 {
    margin-top: calc(var(--spacing) * 16);
  }
  .mt-24 {
    margin-top: calc(var(--spacing) * 24);
  }
  .mt-32 {
    margin-top: calc(var(--spacing) * 32);
  }
  .mt-\[calc\(--spacing\(16\)-\(--spacing\(3\)\)\)\] {
    margin-top: calc(calc(var(--spacing) * 16) - (calc(var(--spacing) * 3)));
  }
  .-mb-3 {
    margin-bottom: calc(var(--spacing) * -3);
  }
  .mb-3 {
    margin-bottom: calc(var(--spacing) * 3);
  }
  .mb-8 {
    margin-bottom: calc(var(--spacing) * 8);
  }
  .ml-1 {
    margin-left: calc(var(--spacing) * 1);
  }
  .ml-2 {
    margin-left: calc(var(--spacing) * 2);
  }
  .ml-3 {
    margin-left: calc(var(--spacing) * 3);
  }
  .ml-4 {
    margin-left: calc(var(--spacing) * 4);
  }
  .ml-auto {
    margin-left: auto;
  }
  .block {
    display: block;
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline {
    display: inline;
  }
  .inline-block {
    display: inline-block;
  }
  .inline-flex {
    display: inline-flex;
  }
  .table {
    display: table;
  }
  .aspect-9\/10 {
    aspect-ratio: 9/10;
  }
  .aspect-square {
    aspect-ratio: 1 / 1;
  }
  .h-4 {
    height: calc(var(--spacing) * 4);
  }
  .h-6 {
    height: calc(var(--spacing) * 6);
  }
  .h-7 {
    height: calc(var(--spacing) * 7);
  }
  .h-8 {
    height: calc(var(--spacing) * 8);
  }
  .h-9 {
    height: calc(var(--spacing) * 9);
  }
  .h-10 {
    height: calc(var(--spacing) * 10);
  }
  .h-12 {
    height: calc(var(--spacing) * 12);
  }
  .h-16 {
    height: calc(var(--spacing) * 16);
  }
  .h-auto {
    height: auto;
  }
  .h-full {
    height: 100%;
  }
  .h-px {
    height: 1px;
  }
  .w-0\.5 {
    width: calc(var(--spacing) * 0.5);
  }
  .w-2 {
    width: calc(var(--spacing) * 2);
  }
  .w-4 {
    width: calc(var(--spacing) * 4);
  }
  .w-6 {
    width: calc(var(--spacing) * 6);
  }
  .w-7 {
    width: calc(var(--spacing) * 7);
  }
  .w-8 {
    width: calc(var(--spacing) * 8);
  }
  .w-9 {
    width: calc(var(--spacing) * 9);
  }
  .w-10 {
    width: calc(var(--spacing) * 10);
  }
  .w-12 {
    width: calc(var(--spacing) * 12);
  }
  .w-16 {
    width: calc(var(--spacing) * 16);
  }
  .w-44 {
    width: calc(var(--spacing) * 44);
  }
  .w-full {
    width: 100%;
  }
  .max-w-2xl {
    max-width: var(--container-2xl);
  }
  .max-w-3xl {
    max-width: var(--container-3xl);
  }
  .max-w-7xl {
    max-width: var(--container-7xl);
  }
  .max-w-xl {
    max-width: var(--container-xl);
  }
  .max-w-xs {
    max-width: var(--container-xs);
  }
  .min-w-0 {
    min-width: calc(var(--spacing) * 0);
  }
  .flex-1 {
    flex: 1;
  }
  .flex-auto {
    flex: auto;
  }
  .flex-none {
    flex: none;
  }
  .origin-left {
    transform-origin: left;
  }
  .origin-top {
    transform-origin: top;
  }
  .scale-95 {
    --tw-scale-x: 95%;
    --tw-scale-y: 95%;
    --tw-scale-z: 95%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
  }
  .scale-100 {
    --tw-scale-x: 100%;
    --tw-scale-y: 100%;
    --tw-scale-z: 100%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
  }
  .-rotate-2 {
    rotate: calc(2deg * -1);
  }
  .rotate-2 {
    rotate: 2deg;
  }
  .rotate-3 {
    rotate: 3deg;
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .resize {
    resize: both;
  }
  .appearance-none {
    appearance: none;
  }
  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-row-reverse {
    flex-direction: row-reverse;
  }
  .flex-wrap {
    flex-wrap: wrap;
  }
  .items-baseline {
    align-items: baseline;
  }
  .items-center {
    align-items: center;
  }
  .items-start {
    align-items: flex-start;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }
  .gap-5 {
    gap: calc(var(--spacing) * 5);
  }
  .gap-6 {
    gap: calc(var(--spacing) * 6);
  }
  .gap-16 {
    gap: calc(var(--spacing) * 16);
  }
  .space-y-4 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-7 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 7) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 7) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-10 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 10) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 10) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-16 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 16) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 16) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-20 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 20) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 20) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .gap-x-2 {
    column-gap: calc(var(--spacing) * 2);
  }
  .gap-x-6 {
    column-gap: calc(var(--spacing) * 6);
  }
  .gap-x-12 {
    column-gap: calc(var(--spacing) * 12);
  }
  .gap-y-1 {
    row-gap: calc(var(--spacing) * 1);
  }
  .gap-y-8 {
    row-gap: calc(var(--spacing) * 8);
  }
  .gap-y-16 {
    row-gap: calc(var(--spacing) * 16);
  }
  .gap-y-20 {
    row-gap: calc(var(--spacing) * 20);
  }
  .divide-y {
    :where(& > :not(:last-child)) {
      --tw-divide-y-reverse: 0;
      border-bottom-style: var(--tw-border-style);
      border-top-style: var(--tw-border-style);
      border-top-width: calc(1px * var(--tw-divide-y-reverse));
      border-bottom-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
    }
  }
  .divide-zinc-100 {
    :where(& > :not(:last-child)) {
      border-color: var(--color-zinc-100);
    }
  }
  .overflow-hidden {
    overflow: hidden;
  }
  .rounded-2xl {
    border-radius: var(--radius-2xl);
  }
  .rounded-3xl {
    border-radius: var(--radius-3xl);
  }
  .rounded-full {
    border-radius: calc(infinity * 1px);
  }
  .rounded-md {
    border-radius: var(--radius-md);
  }
  .rounded-xl {
    border-radius: var(--radius-xl);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-t {
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
  }
  .border-zinc-100 {
    border-color: var(--color-zinc-100);
  }
  .border-zinc-900\/10 {
    border-color: color-mix(in srgb, oklch(21% 0.006 285.885) 10%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      border-color: color-mix(in oklab, var(--color-zinc-900) 10%, transparent);
    }
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .bg-white\/90 {
    background-color: color-mix(in srgb, #fff 90%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-white) 90%, transparent);
    }
  }
  .bg-zinc-50 {
    background-color: var(--color-zinc-50);
  }
  .bg-zinc-100 {
    background-color: var(--color-zinc-100);
  }
  .bg-zinc-200 {
    background-color: var(--color-zinc-200);
  }
  .bg-zinc-800 {
    background-color: var(--color-zinc-800);
  }
  .bg-zinc-800\/40 {
    background-color: color-mix(in srgb, oklch(27.4% 0.006 286.033) 40%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-zinc-800) 40%, transparent);
    }
  }
  .bg-linear-to-r {
    --tw-gradient-position: to right;
    @supports (background-image: linear-gradient(in lab, red, red)) {
      --tw-gradient-position: to right in oklab;
    }
    background-image: linear-gradient(var(--tw-gradient-stops));
  }
  .from-teal-500\/0 {
    --tw-gradient-from: color-mix(in srgb, oklch(70.4% 0.14 182.503) 0%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-gradient-from: color-mix(in oklab, var(--color-teal-500) 0%, transparent);
    }
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .via-teal-500\/40 {
    --tw-gradient-via: color-mix(in srgb, oklch(70.4% 0.14 182.503) 40%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-gradient-via: color-mix(in oklab, var(--color-teal-500) 40%, transparent);
    }
    --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);
    --tw-gradient-stops: var(--tw-gradient-via-stops);
  }
  .to-teal-500\/0 {
    --tw-gradient-to: color-mix(in srgb, oklch(70.4% 0.14 182.503) 0%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-gradient-to: color-mix(in oklab, var(--color-teal-500) 0%, transparent);
    }
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .fill-zinc-100 {
    fill: var(--color-zinc-100);
  }
  .fill-zinc-500 {
    fill: var(--color-zinc-500);
  }
  .fill-zinc-700 {
    fill: var(--color-zinc-700);
  }
  .stroke-current {
    stroke: currentcolor;
  }
  .stroke-zinc-400 {
    stroke: var(--color-zinc-400);
  }
  .stroke-zinc-500 {
    stroke: var(--color-zinc-500);
  }
  .object-cover {
    object-fit: cover;
  }
  .p-0\.5 {
    padding: calc(var(--spacing) * 0.5);
  }
  .p-1 {
    padding: calc(var(--spacing) * 1);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .p-8 {
    padding: calc(var(--spacing) * 8);
  }
  .px-2\.5 {
    padding-inline: calc(var(--spacing) * 2.5);
  }
  .px-3 {
    padding-inline: calc(var(--spacing) * 3);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .py-4 {
    padding-block: calc(var(--spacing) * 4);
  }
  .py-\[calc\(--spacing\(2\)-1px\)\] {
    padding-block: calc(calc(var(--spacing) * 2) - 1px);
  }
  .pt-3 {
    padding-top: calc(var(--spacing) * 3);
  }
  .pt-6 {
    padding-top: calc(var(--spacing) * 6);
  }
  .pt-8 {
    padding-top: calc(var(--spacing) * 8);
  }
  .pt-10 {
    padding-top: calc(var(--spacing) * 10);
  }
  .pt-16 {
    padding-top: calc(var(--spacing) * 16);
  }
  .pb-16 {
    padding-bottom: calc(var(--spacing) * 16);
  }
  .pl-3\.5 {
    padding-left: calc(var(--spacing) * 3.5);
  }
  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }
  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .tracking-tight {
    --tw-tracking: var(--tracking-tight);
    letter-spacing: var(--tracking-tight);
  }
  .text-teal-500 {
    color: var(--color-teal-500);
  }
  .text-zinc-100 {
    color: var(--color-zinc-100);
  }
  .text-zinc-400 {
    color: var(--color-zinc-400);
  }
  .text-zinc-500 {
    color: var(--color-zinc-500);
  }
  .text-zinc-600 {
    color: var(--color-zinc-600);
  }
  .text-zinc-800 {
    color: var(--color-zinc-800);
  }
  .text-zinc-900 {
    color: var(--color-zinc-900);
  }
  .italic {
    font-style: italic;
  }
  .underline {
    text-decoration-line: underline;
  }
  .antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  .opacity-0 {
    opacity: 0%;
  }
  .opacity-100 {
    opacity: 100%;
  }
  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-md {
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .ring-1 {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-zinc-800\/5 {
    --tw-shadow-color: color-mix(in srgb, oklch(27.4% 0.006 286.033) 5%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-zinc-800) 5%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .ring-zinc-100 {
    --tw-ring-color: var(--color-zinc-100);
  }
  .ring-zinc-900\/5 {
    --tw-ring-color: color-mix(in srgb, oklch(21% 0.006 285.885) 5%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-ring-color: color-mix(in oklab, var(--color-zinc-900) 5%, transparent);
    }
  }
  .outline-offset-2 {
    outline-offset: 2px;
  }
  .invert {
    --tw-invert: invert(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .backdrop-blur-sm {
    --tw-backdrop-blur: blur(var(--blur-sm));
    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
  }
  .backdrop-blur-xs {
    --tw-backdrop-blur: blur(var(--blur-xs));
    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, visibility, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-opacity {
    transition-property: opacity;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .duration-150 {
    --tw-duration: 150ms;
    transition-duration: 150ms;
  }
  .group-hover\:scale-100 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        --tw-scale-x: 100%;
        --tw-scale-y: 100%;
        --tw-scale-z: 100%;
        scale: var(--tw-scale-x) var(--tw-scale-y);
      }
    }
  }
  .group-hover\:fill-teal-500 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        fill: var(--color-teal-500);
      }
    }
  }
  .group-hover\:fill-zinc-200 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        fill: var(--color-zinc-200);
      }
    }
  }
  .group-hover\:fill-zinc-600 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        fill: var(--color-zinc-600);
      }
    }
  }
  .group-hover\:stroke-zinc-700 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        stroke: var(--color-zinc-700);
      }
    }
  }
  .group-hover\:text-teal-500 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        color: var(--color-teal-500);
      }
    }
  }
  .group-hover\:opacity-100 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        opacity: 100%;
      }
    }
  }
  .group-active\:stroke-zinc-600 {
    &:is(:where(.group):active *) {
      stroke: var(--color-zinc-600);
    }
  }
  .placeholder\:text-zinc-400 {
    &::placeholder {
      color: var(--color-zinc-400);
    }
  }
  .hover\:bg-zinc-100 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-zinc-100);
      }
    }
  }
  .hover\:bg-zinc-700 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-zinc-700);
      }
    }
  }
  .hover\:text-teal-500 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-teal-500);
      }
    }
  }
  .focus\:border-teal-500 {
    &:focus {
      border-color: var(--color-teal-500);
    }
  }
  .focus\:ring-4 {
    &:focus {
      --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }
  .focus\:ring-teal-500\/10 {
    &:focus {
      --tw-ring-color: color-mix(in srgb, oklch(70.4% 0.14 182.503) 10%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-ring-color: color-mix(in oklab, var(--color-teal-500) 10%, transparent);
      }
    }
  }
  .focus\:outline-hidden {
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
  }
  .active\:bg-zinc-100 {
    &:active {
      background-color: var(--color-zinc-100);
    }
  }
  .active\:bg-zinc-800 {
    &:active {
      background-color: var(--color-zinc-800);
    }
  }
  .active\:text-zinc-100\/70 {
    &:active {
      color: color-mix(in srgb, oklch(96.7% 0.001 286.375) 70%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-zinc-100) 70%, transparent);
      }
    }
  }
  .active\:text-zinc-900\/60 {
    &:active {
      color: color-mix(in srgb, oklch(21% 0.006 285.885) 60%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-zinc-900) 60%, transparent);
      }
    }
  }
  .active\:transition-none {
    &:active {
      transition-property: none;
    }
  }
  .data-closed\:scale-95 {
    &[data-closed] {
      --tw-scale-x: 95%;
      --tw-scale-y: 95%;
      --tw-scale-z: 95%;
      scale: var(--tw-scale-x) var(--tw-scale-y);
    }
  }
  .data-closed\:opacity-0 {
    &[data-closed] {
      opacity: 0%;
    }
  }
  .data-enter\:ease-out {
    &[data-enter] {
      --tw-ease: var(--ease-out);
      transition-timing-function: var(--ease-out);
    }
  }
  .data-leave\:ease-in {
    &[data-leave] {
      --tw-ease: var(--ease-in);
      transition-timing-function: var(--ease-in);
    }
  }
  .sm\:-inset-x-6 {
    @media (width >= 40rem) {
      inset-inline: calc(var(--spacing) * -6);
    }
  }
  .sm\:mt-20 {
    @media (width >= 40rem) {
      margin-top: calc(var(--spacing) * 20);
    }
  }
  .sm\:mt-32 {
    @media (width >= 40rem) {
      margin-top: calc(var(--spacing) * 32);
    }
  }
  .sm\:w-72 {
    @media (width >= 40rem) {
      width: calc(var(--spacing) * 72);
    }
  }
  .sm\:grid-cols-2 {
    @media (width >= 40rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  .sm\:flex-row {
    @media (width >= 40rem) {
      flex-direction: row;
    }
  }
  .sm\:gap-8 {
    @media (width >= 40rem) {
      gap: calc(var(--spacing) * 8);
    }
  }
  .sm\:rounded-2xl {
    @media (width >= 40rem) {
      border-radius: var(--radius-2xl);
    }
  }
  .sm\:px-8 {
    @media (width >= 40rem) {
      padding-inline: calc(var(--spacing) * 8);
    }
  }
  .sm\:pt-32 {
    @media (width >= 40rem) {
      padding-top: calc(var(--spacing) * 32);
    }
  }
  .sm\:text-5xl {
    @media (width >= 40rem) {
      font-size: var(--text-5xl);
      line-height: var(--tw-leading, var(--text-5xl--line-height));
    }
  }
  .sm\:text-sm {
    @media (width >= 40rem) {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
    }
  }
  .md\:col-span-3 {
    @media (width >= 48rem) {
      grid-column: span 3 / span 3;
    }
  }
  .md\:mt-28 {
    @media (width >= 48rem) {
      margin-top: calc(var(--spacing) * 28);
    }
  }
  .md\:block {
    @media (width >= 48rem) {
      display: block;
    }
  }
  .md\:grid {
    @media (width >= 48rem) {
      display: grid;
    }
  }
  .md\:hidden {
    @media (width >= 48rem) {
      display: none;
    }
  }
  .md\:flex-1 {
    @media (width >= 48rem) {
      flex: 1;
    }
  }
  .md\:grid-cols-4 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }
  }
  .md\:items-baseline {
    @media (width >= 48rem) {
      align-items: baseline;
    }
  }
  .md\:justify-center {
    @media (width >= 48rem) {
      justify-content: center;
    }
  }
  .md\:border-l {
    @media (width >= 48rem) {
      border-left-style: var(--tw-border-style);
      border-left-width: 1px;
    }
  }
  .md\:border-zinc-100 {
    @media (width >= 48rem) {
      border-color: var(--color-zinc-100);
    }
  }
  .md\:pl-6 {
    @media (width >= 48rem) {
      padding-left: calc(var(--spacing) * 6);
    }
  }
  .lg\:absolute {
    @media (width >= 64rem) {
      position: absolute;
    }
  }
  .lg\:-left-5 {
    @media (width >= 64rem) {
      left: calc(var(--spacing) * -5);
    }
  }
  .lg\:order-first {
    @media (width >= 64rem) {
      order: -9999;
    }
  }
  .lg\:row-span-2 {
    @media (width >= 64rem) {
      grid-row: span 2 / span 2;
    }
  }
  .lg\:-mt-2 {
    @media (width >= 64rem) {
      margin-top: calc(var(--spacing) * -2);
    }
  }
  .lg\:mt-32 {
    @media (width >= 64rem) {
      margin-top: calc(var(--spacing) * 32);
    }
  }
  .lg\:mb-0 {
    @media (width >= 64rem) {
      margin-bottom: calc(var(--spacing) * 0);
    }
  }
  .lg\:max-w-5xl {
    @media (width >= 64rem) {
      max-width: var(--container-5xl);
    }
  }
  .lg\:max-w-none {
    @media (width >= 64rem) {
      max-width: none;
    }
  }
  .lg\:grid-cols-2 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  .lg\:grid-cols-3 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  .lg\:grid-rows-\[auto_1fr\] {
    @media (width >= 64rem) {
      grid-template-rows: auto 1fr;
    }
  }
  .lg\:gap-y-12 {
    @media (width >= 64rem) {
      row-gap: calc(var(--spacing) * 12);
    }
  }
  .lg\:px-8 {
    @media (width >= 64rem) {
      padding-inline: calc(var(--spacing) * 8);
    }
  }
  .lg\:px-12 {
    @media (width >= 64rem) {
      padding-inline: calc(var(--spacing) * 12);
    }
  }
  .lg\:pl-16 {
    @media (width >= 64rem) {
      padding-left: calc(var(--spacing) * 16);
    }
  }
  .lg\:pl-20 {
    @media (width >= 64rem) {
      padding-left: calc(var(--spacing) * 20);
    }
  }
  .xl\:relative {
    @media (width >= 80rem) {
      position: relative;
    }
  }
  .xl\:-top-1\.5 {
    @media (width >= 80rem) {
      top: calc(var(--spacing) * -1.5);
    }
  }
  .xl\:left-0 {
    @media (width >= 80rem) {
      left: calc(var(--spacing) * 0);
    }
  }
  .xl\:mt-0 {
    @media (width >= 80rem) {
      margin-top: calc(var(--spacing) * 0);
    }
  }
  .xl\:pl-24 {
    @media (width >= 80rem) {
      padding-left: calc(var(--spacing) * 24);
    }
  }
  .dark\:block {
    &:where(.dark, .dark *) {
      display: block;
    }
  }
  .dark\:hidden {
    &:where(.dark, .dark *) {
      display: none;
    }
  }
  .dark\:divide-zinc-100\/5 {
    &:where(.dark, .dark *) {
      :where(& > :not(:last-child)) {
        border-color: color-mix(in srgb, oklch(96.7% 0.001 286.375) 5%, transparent);
        @supports (color: color-mix(in lab, red, red)) {
          border-color: color-mix(in oklab, var(--color-zinc-100) 5%, transparent);
        }
      }
    }
  }
  .dark\:border {
    &:where(.dark, .dark *) {
      border-style: var(--tw-border-style);
      border-width: 1px;
    }
  }
  .dark\:border-zinc-700 {
    &:where(.dark, .dark *) {
      border-color: var(--color-zinc-700);
    }
  }
  .dark\:border-zinc-700\/40 {
    &:where(.dark, .dark *) {
      border-color: color-mix(in srgb, oklch(37% 0.013 285.805) 40%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-zinc-700) 40%, transparent);
      }
    }
  }
  .dark\:border-zinc-700\/50 {
    &:where(.dark, .dark *) {
      border-color: color-mix(in srgb, oklch(37% 0.013 285.805) 50%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-zinc-700) 50%, transparent);
      }
    }
  }
  .dark\:bg-black {
    &:where(.dark, .dark *) {
      background-color: var(--color-black);
    }
  }
  .dark\:bg-black\/80 {
    &:where(.dark, .dark *) {
      background-color: color-mix(in srgb, #000 80%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-black) 80%, transparent);
      }
    }
  }
  .dark\:bg-zinc-500 {
    &:where(.dark, .dark *) {
      background-color: var(--color-zinc-500);
    }
  }
  .dark\:bg-zinc-700 {
    &:where(.dark, .dark *) {
      background-color: var(--color-zinc-700);
    }
  }
  .dark\:bg-zinc-700\/\[0\.15\] {
    &:where(.dark, .dark *) {
      background-color: color-mix(in srgb, oklch(37% 0.013 285.805) 15%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-zinc-700) 15%, transparent);
      }
    }
  }
  .dark\:bg-zinc-800 {
    &:where(.dark, .dark *) {
      background-color: var(--color-zinc-800);
    }
  }
  .dark\:bg-zinc-800\/50 {
    &:where(.dark, .dark *) {
      background-color: color-mix(in srgb, oklch(27.4% 0.006 286.033) 50%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-zinc-800) 50%, transparent);
      }
    }
  }
  .dark\:bg-zinc-800\/90 {
    &:where(.dark, .dark *) {
      background-color: color-mix(in srgb, oklch(27.4% 0.006 286.033) 90%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-zinc-800) 90%, transparent);
      }
    }
  }
  .dark\:bg-zinc-900 {
    &:where(.dark, .dark *) {
      background-color: var(--color-zinc-900);
    }
  }
  .dark\:from-teal-400\/0 {
    &:where(.dark, .dark *) {
      --tw-gradient-from: color-mix(in srgb, oklch(77.7% 0.152 181.912) 0%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-gradient-from: color-mix(in oklab, var(--color-teal-400) 0%, transparent);
      }
      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
    }
  }
  .dark\:via-teal-400\/40 {
    &:where(.dark, .dark *) {
      --tw-gradient-via: color-mix(in srgb, oklch(77.7% 0.152 181.912) 40%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-gradient-via: color-mix(in oklab, var(--color-teal-400) 40%, transparent);
      }
      --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);
      --tw-gradient-stops: var(--tw-gradient-via-stops);
    }
  }
  .dark\:to-teal-400\/0 {
    &:where(.dark, .dark *) {
      --tw-gradient-to: color-mix(in srgb, oklch(77.7% 0.152 181.912) 0%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-gradient-to: color-mix(in oklab, var(--color-teal-400) 0%, transparent);
      }
      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
    }
  }
  .dark\:fill-zinc-100\/10 {
    &:where(.dark, .dark *) {
      fill: color-mix(in srgb, oklch(96.7% 0.001 286.375) 10%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        fill: color-mix(in oklab, var(--color-zinc-100) 10%, transparent);
      }
    }
  }
  .dark\:fill-zinc-400 {
    &:where(.dark, .dark *) {
      fill: var(--color-zinc-400);
    }
  }
  .dark\:stroke-zinc-500 {
    &:where(.dark, .dark *) {
      stroke: var(--color-zinc-500);
    }
  }
  .dark\:text-teal-400 {
    &:where(.dark, .dark *) {
      color: var(--color-teal-400);
    }
  }
  .dark\:text-zinc-100 {
    &:where(.dark, .dark *) {
      color: var(--color-zinc-100);
    }
  }
  .dark\:text-zinc-200 {
    &:where(.dark, .dark *) {
      color: var(--color-zinc-200);
    }
  }
  .dark\:text-zinc-300 {
    &:where(.dark, .dark *) {
      color: var(--color-zinc-300);
    }
  }
  .dark\:text-zinc-400 {
    &:where(.dark, .dark *) {
      color: var(--color-zinc-400);
    }
  }
  .dark\:text-zinc-500 {
    &:where(.dark, .dark *) {
      color: var(--color-zinc-500);
    }
  }
  .dark\:ring-0 {
    &:where(.dark, .dark *) {
      --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }
  .dark\:ring-white\/10 {
    &:where(.dark, .dark *) {
      --tw-ring-color: color-mix(in srgb, #fff 10%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-ring-color: color-mix(in oklab, var(--color-white) 10%, transparent);
      }
    }
  }
  .dark\:ring-zinc-300\/20 {
    &:where(.dark, .dark *) {
      --tw-ring-color: color-mix(in srgb, oklch(87.1% 0.006 286.286) 20%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-ring-color: color-mix(in oklab, var(--color-zinc-300) 20%, transparent);
      }
    }
  }
  .dark\:ring-zinc-800 {
    &:where(.dark, .dark *) {
      --tw-ring-color: var(--color-zinc-800);
    }
  }
  .dark\:prose-invert {
    &:where(.dark, .dark *) {
      --tw-prose-body: var(--tw-prose-invert-body);
      --tw-prose-headings: var(--tw-prose-invert-headings);
      --tw-prose-links: var(--tw-prose-invert-links);
      --tw-prose-links-hover: var(--tw-prose-invert-links-hover);
      --tw-prose-underline: var(--tw-prose-invert-underline);
      --tw-prose-underline-hover: var(--tw-prose-invert-underline-hover);
      --tw-prose-bold: var(--tw-prose-invert-bold);
      --tw-prose-counters: var(--tw-prose-invert-counters);
      --tw-prose-bullets: var(--tw-prose-invert-bullets);
      --tw-prose-hr: var(--tw-prose-invert-hr);
      --tw-prose-quote-borders: var(--tw-prose-invert-quote-borders);
      --tw-prose-captions: var(--tw-prose-invert-captions);
      --tw-prose-code: var(--tw-prose-invert-code);
      --tw-prose-code-bg: var(--tw-prose-invert-code-bg);
      --tw-prose-pre-code: var(--tw-prose-invert-pre-code);
      --tw-prose-pre-bg: var(--tw-prose-invert-pre-bg);
      --tw-prose-pre-border: var(--tw-prose-invert-pre-border);
      --tw-prose-th-borders: var(--tw-prose-invert-th-borders);
      --tw-prose-td-borders: var(--tw-prose-invert-td-borders);
    }
  }
  .dark\:group-hover\:fill-zinc-300 {
    &:where(.dark, .dark *) {
      &:is(:where(.group):hover *) {
        @media (hover: hover) {
          fill: var(--color-zinc-300);
        }
      }
    }
  }
  .dark\:group-hover\:stroke-zinc-50 {
    &:where(.dark, .dark *) {
      &:is(:where(.group):hover *) {
        @media (hover: hover) {
          stroke: var(--color-zinc-50);
        }
      }
    }
  }
  .dark\:group-hover\:stroke-zinc-400 {
    &:where(.dark, .dark *) {
      &:is(:where(.group):hover *) {
        @media (hover: hover) {
          stroke: var(--color-zinc-400);
        }
      }
    }
  }
  .dark\:group-active\:stroke-zinc-50 {
    &:where(.dark, .dark *) {
      &:is(:where(.group):active *) {
        stroke: var(--color-zinc-50);
      }
    }
  }
  .dark\:placeholder\:text-zinc-500 {
    &:where(.dark, .dark *) {
      &::placeholder {
        color: var(--color-zinc-500);
      }
    }
  }
  .dark\:hover\:border-zinc-700 {
    &:where(.dark, .dark *) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-zinc-700);
        }
      }
    }
  }
  .dark\:hover\:bg-zinc-600 {
    &:where(.dark, .dark *) {
      &:hover {
        @media (hover: hover) {
          background-color: var(--color-zinc-600);
        }
      }
    }
  }
  .dark\:hover\:bg-zinc-800 {
    &:where(.dark, .dark *) {
      &:hover {
        @media (hover: hover) {
          background-color: var(--color-zinc-800);
        }
      }
    }
  }
  .dark\:hover\:text-teal-400 {
    &:where(.dark, .dark *) {
      &:hover {
        @media (hover: hover) {
          color: var(--color-teal-400);
        }
      }
    }
  }
  .dark\:hover\:text-teal-500 {
    &:where(.dark, .dark *) {
      &:hover {
        @media (hover: hover) {
          color: var(--color-teal-500);
        }
      }
    }
  }
  .dark\:hover\:text-zinc-50 {
    &:where(.dark, .dark *) {
      &:hover {
        @media (hover: hover) {
          color: var(--color-zinc-50);
        }
      }
    }
  }
  .dark\:hover\:ring-white\/20 {
    &:where(.dark, .dark *) {
      &:hover {
        @media (hover: hover) {
          --tw-ring-color: color-mix(in srgb, #fff 20%, transparent);
          @supports (color: color-mix(in lab, red, red)) {
            --tw-ring-color: color-mix(in oklab, var(--color-white) 20%, transparent);
          }
        }
      }
    }
  }
  .dark\:focus\:border-teal-400 {
    &:where(.dark, .dark *) {
      &:focus {
        border-color: var(--color-teal-400);
      }
    }
  }
  .dark\:focus\:ring-teal-400\/10 {
    &:where(.dark, .dark *) {
      &:focus {
        --tw-ring-color: color-mix(in srgb, oklch(77.7% 0.152 181.912) 10%, transparent);
        @supports (color: color-mix(in lab, red, red)) {
          --tw-ring-color: color-mix(in oklab, var(--color-teal-400) 10%, transparent);
        }
      }
    }
  }
  .dark\:active\:bg-zinc-700 {
    &:where(.dark, .dark *) {
      &:active {
        background-color: var(--color-zinc-700);
      }
    }
  }
  .dark\:active\:bg-zinc-800\/50 {
    &:where(.dark, .dark *) {
      &:active {
        background-color: color-mix(in srgb, oklch(27.4% 0.006 286.033) 50%, transparent);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-zinc-800) 50%, transparent);
        }
      }
    }
  }
  .dark\:active\:text-zinc-50\/70 {
    &:where(.dark, .dark *) {
      &:active {
        color: color-mix(in srgb, oklch(98.5% 0 0) 70%, transparent);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-zinc-50) 70%, transparent);
        }
      }
    }
  }
  .dark\:active\:text-zinc-100\/70 {
    &:where(.dark, .dark *) {
      &:active {
        color: color-mix(in srgb, oklch(96.7% 0.001 286.375) 70%, transparent);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-zinc-100) 70%, transparent);
        }
      }
    }
  }
  .md\:dark\:border-zinc-700\/40 {
    @media (width >= 48rem) {
      &:where(.dark, .dark *) {
        border-color: color-mix(in srgb, oklch(37% 0.013 285.805) 40%, transparent);
        @supports (color: color-mix(in lab, red, red)) {
          border-color: color-mix(in oklab, var(--color-zinc-700) 40%, transparent);
        }
      }
    }
  }
  .\[\@media_not_\(prefers-color-scheme\:dark\)\]\:fill-teal-400\/10 {
    @media not (prefers-color-scheme:dark) {
      fill: color-mix(in srgb, oklch(77.7% 0.152 181.912) 10%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        fill: color-mix(in oklab, var(--color-teal-400) 10%, transparent);
      }
    }
  }
  .\[\@media_not_\(prefers-color-scheme\:dark\)\]\:stroke-teal-500 {
    @media not (prefers-color-scheme:dark) {
      stroke: var(--color-teal-500);
    }
  }
  .\[\@media\(prefers-color-scheme\:dark\)\]\:fill-teal-50 {
    @media (prefers-color-scheme:dark) {
      fill: var(--color-teal-50);
    }
  }
  .\[\@media\(prefers-color-scheme\:dark\)\]\:stroke-teal-500 {
    @media (prefers-color-scheme:dark) {
      stroke: var(--color-teal-500);
    }
  }
  .\[\@media\(prefers-color-scheme\:dark\)\]\:group-hover\:fill-teal-50 {
    @media (prefers-color-scheme:dark) {
      &:is(:where(.group):hover *) {
        @media (hover: hover) {
          fill: var(--color-teal-50);
        }
      }
    }
  }
  .\[\@media\(prefers-color-scheme\:dark\)\]\:group-hover\:stroke-teal-600 {
    @media (prefers-color-scheme:dark) {
      &:is(:where(.group):hover *) {
        @media (hover: hover) {
          stroke: var(--color-teal-600);
        }
      }
    }
  }
  .\[\@media\(prefers-color-scheme\:dark\)\]\:group-hover\:stroke-zinc-400 {
    @media (prefers-color-scheme:dark) {
      &:is(:where(.group):hover *) {
        @media (hover: hover) {
          stroke: var(--color-zinc-400);
        }
      }
    }
  }
}
@layer components {
  pre[class*='language-'] {
    color: var(--color-zinc-100);
  }
  .token.tag, .token.class-name, .token.selector, .token.selector .class, .token.selector.class, .token.function {
    color: var(--color-pink-400);
  }
  .token.attr-name, .token.keyword, .token.rule, .token.pseudo-class, .token.important {
    color: var(--color-zinc-300);
  }
  .token.module {
    color: var(--color-pink-400);
  }
  .token.attr-value, .token.class, .token.string, .token.property {
    color: var(--color-teal-300);
  }
  .token.punctuation, .token.attr-equals {
    color: var(--color-zinc-500);
  }
  .token.unit, .language-css .token.function {
    color: var(--color-sky-200);
  }
  .token.comment, .token.operator, .token.combinator {
    color: var(--color-zinc-400);
  }
}
@property --tw-scale-x {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}
@property --tw-scale-y {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}
@property --tw-scale-z {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-divide-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-gradient-position {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-via {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-to {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-via-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 0%;
}
@property --tw-gradient-via-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 50%;
}
@property --tw-gradient-to-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-tracking {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@property --tw-ease {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-scale-x: 1;
      --tw-scale-y: 1;
      --tw-scale-z: 1;
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-divide-y-reverse: 0;
      --tw-border-style: solid;
      --tw-gradient-position: initial;
      --tw-gradient-from: #0000;
      --tw-gradient-via: #0000;
      --tw-gradient-to: #0000;
      --tw-gradient-stops: initial;
      --tw-gradient-via-stops: initial;
      --tw-gradient-from-position: 0%;
      --tw-gradient-via-position: 50%;
      --tw-gradient-to-position: 100%;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-backdrop-blur: initial;
      --tw-backdrop-brightness: initial;
      --tw-backdrop-contrast: initial;
      --tw-backdrop-grayscale: initial;
      --tw-backdrop-hue-rotate: initial;
      --tw-backdrop-invert: initial;
      --tw-backdrop-opacity: initial;
      --tw-backdrop-saturate: initial;
      --tw-backdrop-sepia: initial;
      --tw-duration: initial;
      --tw-ease: initial;
    }
  }
}

